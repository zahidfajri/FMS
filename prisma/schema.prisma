// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String?
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  ADMIN
  TECHNICIAN
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  username      String      @unique
  role          Role        @default(USER)
  password      String
  // Default
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified DateTime?
  // Technician
  phoneNumber   String?
  // Relation
  departmentId  Int?
  department    Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  ticket        Ticket[]

  accounts Account[]
  sessions Session[]

  @@index([departmentId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  // Contact Person
  emailPic    String?
  // Relation
  ticket      Ticket[]
  user        User[]
}

enum TicketType {
  INQUIRY
  COMPLAINT
  SUGGESTION
  COMPLIMENT
}

model Ticket {
  // Identity
  id           Int         @id @default(autoincrement())
  email        String
  name         String
  title        String
  subtitle     String
  attachment   String?
  type         TicketType?
  code         String      @unique
  // Default
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  // Detail
  isSolved     Boolean     @default(false)
  solvedAt     DateTime?
  // Comment
  comment      Comment[]
  // Department
  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  // user
  userId       String?
  technician   User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([departmentId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  title       String
  description String?
  attachment  String?
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    Int
  createBy    String?

  @@index([ticketId])
}
